generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dms {
  id                        Int    @id @default(autoincrement())
  user1_id                  Int
  user2_id                  Int
  content                   String @db.VarChar(1000)
  users_dms_user1_idTousers users  @relation("dms_user1_idTousers", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_dms_user2_idTousers users  @relation("dms_user2_idTousers", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model followers {
  follower_id                         Int
  following_id                        Int
  users_followers_follower_idTousers  users @relation("followers_follower_idTousers", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_following_idTousers users @relation("followers_following_idTousers", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([follower_id, following_id])
}

model likes {
  author_id Int
  post_id   Int
  users     users @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts     posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([author_id, post_id])
}

model post_segments {
  segment_id Int
  post_id    Int
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  segments   segments @relation(fields: [segment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([post_id, segment_id])
}

model post_tags {
  tag_id  Int
  post_id Int
  posts   posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags  @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

model posts {
  id            Int             @id @default(autoincrement())
  created_at    DateTime        @default(now())
  author_id     Int
  parent_id     Int?
  likes         likes[]
  post_segments post_segments[]
  post_tags     post_tags[]
  users         users           @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts         posts?          @relation("postsToposts", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_posts   posts[]         @relation("postsToposts")
  replies       replies[]
}

model replies {
  id        Int     @id @default(autoincrement())
  content   String? @db.VarChar(1000)
  author_id Int
  post_id   Int
  users     users   @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts     posts   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model segments {
  id            Int             @id @default(autoincrement())
  author_id     Int
  post_type     post_type       @default(text)
  content       String          @db.VarChar(4000)
  created_at    DateTime        @default(now())
  post_segments post_segments[]
  users         users           @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id        Int         @id @default(autoincrement())
  content   String      @db.VarChar(140)
  post_tags post_tags[]
}

model users {
  id                                      Int         @id @default(autoincrement())
  email                                   String      @unique @db.VarChar(320)
  uname                                   String      @unique @db.VarChar(20)
  pw                                      String
  pfp                                     String?
  pfp_id                                  String?
  h_img                                   String?
  h_img_id                                String?
  about                                   String?     @db.VarChar(400)
  dms_dms_user1_idTousers                 dms[]       @relation("dms_user1_idTousers")
  dms_dms_user2_idTousers                 dms[]       @relation("dms_user2_idTousers")
  followers_followers_follower_idTousers  followers[] @relation("followers_follower_idTousers")
  followers_followers_following_idTousers followers[] @relation("followers_following_idTousers")
  likes                                   likes[]
  posts                                   posts[]
  replies                                 replies[]
  segments                                segments[]
}

enum post_type {
  text
  photo
  quote
  link
  chat
  audio
  video
}
