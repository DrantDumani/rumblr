generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(320)
  uname       String    @unique @db.VarChar(20)
  pw          String
  pfp         String?
  pfp_id      String?
  h_img       String?
  h_img_id    String?
  about       String?   @db.VarChar(400)
  posts Post[] @relation(name: "Author")
  segments Segment[]
  replies Reply[]
  likes Post[] @relation(name: "LikedPosts")
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
  user1_dm Dm[] @relation("User1")
  user2_dm Dm[] @relation("User2")
  sender Dm[] @relation("Sender")
}

model Follow {
  follower_id   Int
  following_id Int
  followers User @relation("Followers", fields: [follower_id], references: [id])
  following User @relation("Following", fields: [following_id], references: [id])
  @@id([follower_id, following_id])
}

model Dm {
  id          Int       @id @default(autoincrement())
  user1_id    Int
  user2_id    Int
  content     String    @db.VarChar(1000)
  sender_id   Int
  created_at  DateTime  @default(now())
  user1 User @relation("User1", fields: [user1_id], references: [id])
  user2 User @relation("User2", fields: [user2_id], references: [id])
  sender User @relation("Sender", fields: [sender_id], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  created_at DateTime   @default(now())
  author_id   Int
  parent_id   Int?
  prev_id     Int?
  previous Post? @relation(name: "PreviousPost", fields: [prev_id], references: [id])
  next     Post[] @relation(name: "PreviousPost")
  author User  @relation(name: "Author", fields: [author_id], references: [id])
  parent Post? @relation(name: "Reblogs", fields: [parent_id], references: [id])
  children Post[]  @relation(name: "Reblogs")
  replies Reply[]
  likes User[] @relation(name: "LikedPosts")
  segments Segment[]
  tags Tag[]
}

model Reply {
  id Int @id @default(autoincrement())
  content String @db.VarChar(1000)
  author_id Int
  post_id Int
  posts Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author User @relation(fields: [author_id], references: [id])
}

model Segment {
  id Int @id @default(autoincrement())
  author_id Int
  post_type post_type @default(text)
  content String @db.VarChar(4000)
  created_at DateTime @default(now())
  author User @relation(fields: [author_id], references: [id])
  posts Post[]
}

model Tag {
  id  Int @id @default(autoincrement())
  content String @unique @db.VarChar(140)
  posts Post[]
}

enum post_type {
  text
  photo
  quote
  link
  chat
  audio
  video
}